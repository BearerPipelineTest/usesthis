#!/usr/bin/env ruby
# frozen_string_literal: true

source_path = File.dirname(__dir__)
$LOAD_PATH.unshift(source_path)

require 'date'
require 'dimples'
require 'fileutils'
require 'json'

LINK_PATTERN = /^\[(.+)\]: http.+/.freeze
API_VERSION = 2
API_URL = "https://usesthis.com/api/v#{API_VERSION}"
ITEMS_PER_PAGE = 50
FILTERED_KEYS = %i[slug name title summary url api_url].freeze

def paged_file_url(url, index)
  filename = if index == 1
               'index.json'
             else
               "page_#{index}.json"
             end

  File.join(url, filename)
end

all_interviews = {}
all_gear = {}
all_stats = {}

config_path = File.join(source_path, 'config.json')
config = JSON.parse(File.read(config_path), symbolize_names: true)

api_paths = { root: File.join(config[:destination], 'api', "v#{API_VERSION}") }

puts 'Building API...'

%w[interviews hardware software stats].each do |section|
  path = File.join(api_paths[:root], section)
  api_paths[section.to_sym] = path

  FileUtils.mkdir_p(path)
end

%i[hardware software].each do |type|
  all_gear[type] = {}
  all_stats[type] = { all_time: {} }

  gear_source_path = File.join(source_path, 'gear', type.to_s, '**', '*.json')

  Dir[gear_source_path].sort.each do |path|
    slug = File.basename(path, '.json')
    data = File.read(path)

    all_gear[type][slug.to_sym] = JSON.parse(data, symbolize_names: true).merge(
      slug: slug,
      api_url: "#{API_URL}/#{type}/#{slug}",
      interviews: []
    )
  end
end

interview_source_path = File.join(source_path, 'posts', '*.markdown')

Dir[interview_source_path].sort.reverse_each do |path|
  base_name = File.basename(path, '.markdown')
  _, date_string, slug = base_name.match(/(\d{4}-\d{2}-\d{2})-(.+)/).to_a

  data = File.read(path)
  contents, interview = Dimples::FrontMatter.parse(data)

  date = Date.parse(date_string)
  year = date.year

  interview.merge!(
    slug: slug,
    url: "https://usesthis.com/interviews/#{slug}",
    api_url: "#{API_URL}/interviews/#{slug}",
    contents: contents,
    date: date.iso8601
  )

  interview[:gear] = contents.scan(LINK_PATTERN).flatten.map do |gear_slug|
    gear_slug_sym = gear_slug.to_sym

    type = all_gear[:hardware][gear_slug_sym] ? :hardware : :software
    item = all_gear[type][gear_slug_sym]

    item[:interviews] << interview.slice(*FILTERED_KEYS)

    all_stats[type][year] ||= Hash.new(0)
    all_stats[type][year][gear_slug] += 1

    item.slice(*FILTERED_KEYS)
  end

  all_interviews[slug.to_sym] = interview

  output_path = File.join(api_paths[:interviews], slug, 'index.json')

  FileUtils.mkdir_p(File.dirname(output_path))

  File.open(output_path, 'w') do |interview_file|
    interview_file.write(JSON.generate(interview: interview))
  end
end

FileUtils.mkdir(File.join(api_paths[:interviews], 'pages'))

pager = Dimples::Pager.new(
  "#{API_URL}/interviews/",
  all_interviews.to_a,
  page_prefix: '?page=',
  per_page: ITEMS_PER_PAGE
)

pager.each do |index|
  paged_interviews = pager.posts_at(index).map do |_, interview|
    interview.slice(*FILTERED_KEYS)
  end

  output = {
    interviews: paged_interviews,
    links: pager.to_context[:urls]
  }

  output_path = paged_file_url(api_paths[:interviews], index)

  File.open(output_path, 'w') do |interviews_file|
    interviews_file.write(JSON.generate(output))
  end
end

%i[hardware software].each do |type|
  FileUtils.mkdir(File.join(api_paths[type], 'pages'))

  pager = Dimples::Pager.new(
    "#{API_URL}/#{type}/",
    all_gear[type].to_a,
    page_prefix: '?page=',
    per_page: ITEMS_PER_PAGE
  )

  pager.each do |index|
    paged_gear = pager.posts_at(index).map do |_, item|
      all_stats[type][:all_time][item[:slug]] = item[:interviews].count
      item.slice(*FILTERED_KEYS)
    end

    output = {
      gear: paged_gear,
      links: pager.to_context[:urls]
    }

    File.open(paged_file_url(api_paths[type], index), 'w') do |gear_file|
      gear_file.write(JSON.generate(output))
    end
  end

  all_gear[type].each do |slug, item|
    output_path = File.join(api_paths[type].to_s, slug.to_s, 'index.json')

    FileUtils.mkdir_p(File.dirname(output_path))

    File.open(output_path, 'w') do |gear_file|
      gear_file.write(JSON.generate(item: item))
    end
  end
end

%i[hardware software].each do |type|
  all_stats[type].each do |key, values|
    output_path = File.join(
      api_paths[:stats],
      type.to_s,
      key != :all_time ? key.to_s : '',
      'index.json'
    )

    FileUtils.mkdir_p(File.dirname(output_path))

    stats = values.sort_by(&:last).reverse[0..49].map do |slug, count|
      all_gear[type][slug.to_sym].slice(*FILTERED_KEYS).merge(count: count)
    end

    File.open(output_path, 'w') do |stats_file|
      stats_file.write(JSON.generate(stats: stats))
    end
  end
end

puts 'Done!'
