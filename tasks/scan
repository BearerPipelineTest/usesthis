#!/usr/bin/env ruby

trap('SIGINT') { exit! }

require 'rubygems'
require 'yaml'
require 'faraday'

source_path = File.dirname(__dir__)
$LOAD_PATH.unshift(source_path)

type = ARGV[0]

unless type =~ /^(hardware|software|links|interviews)$/
  abort("Usage: #{__dir__}/scan [hardware|links|software]")
end

case type
when 'hardware'
  glob = File.join(source_path, 'gear', 'hardware', '*.yml')
when 'links'
  glob = File.join(source_path, 'links', '**', '*.yml')
when 'software'
  glob = File.join(source_path, 'gear', 'software', '*.yml')
end

puts 'Scanning:'

Dir.glob(glob) do |path|
  begin
    data = YAML.load_file(path)
    original_url = data['url']

    print "- #{data['name']}: "

    response = Faraday.get(data['url'])
    new_url = response.headers['location']

    case response.status
    when 200
      puts 'All good.'
    when 301, 308
      if new_url =~ /jsessionid/
        puts 'Session URL - ignoring.'
      else
        unless new_url =~ /^https?:\/\//
          uri = Faraday.URI(original_url)
          new_url = "#{uri.scheme}://#{uri.host}#{new_url}"
        end

        data['url'] = new_url
        puts 'Updated (redirected).'
      end
    when 302, 307
      puts 'Temporary redirect - ignoring.'
    when 404
      puts 'Dead link!'
      data['error'] = 'Dead link'
    else
      puts "Unexpected status (#{response.status})!"
    end
  rescue Faraday::ConnectionFailed, Faraday::TimeoutError
    puts 'Timed out!'
    data['error'] = "Dead site"
  rescue Faraday::SSLError
    puts 'SSL certificate error!'
    data['error'] = "SSL certificate"
  rescue URI::InvalidURIError
    puts 'Invalid URL!'
    data['error'] = "Invalid URL"
  rescue Zlib::DataError
    puts 'Header decompression error - ignoring'
  end

  if data['url'] != original_url.to_s || data['error']
    File.open(path, 'w') do |file|
      file.write(YAML.dump(data))
    end
  end
end
