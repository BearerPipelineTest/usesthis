#!/usr/bin/env ruby
# frozen_string_literal: true

trap('SIGINT') { exit! }

source_path = File.dirname(__dir__)
$LOAD_PATH.unshift(source_path)

require 'yaml'
require 'faraday'

type = ARGV[0]

unless type.match?(/^(gear|links)$/)
  abort("Usage: #{__dir__}/scan [gear|links]")
end

source_path = case type
              when 'gear'
                File.join(source_path, 'gear', '**', '*.yml')
              when 'links'
                File.join(source_path, 'links', '**', '*.yml')
              end

puts "Scanning #{type}:"

Dir.glob(source_path) do |path|
  data = YAML.load_file(path)
  next unless data['url']

  original_url = data['url']

  print "- #{data['name']}: "

  begin
    response = Faraday.get(data['url'])
    new_url = response.headers['location']

    case response.status
    when 200
      puts 'All good.'
    when 301, 308
      data['url'] = new_url
      puts 'Updated (redirected).'
    when 302, 307
      puts 'Temporary redirect - ignoring.'
    when 404
      data['error'] = 'Dead link'
      puts "Dead link!"
    else
      puts "Unexpected status (#{response.status})!"
    end
  rescue Faraday::ConnectionFailed
    puts 'Connection failed - ignoring.'
  rescue Faraday::TimeoutError
    puts 'Connection timed out - ignoring.'
  rescue Faraday::SSLError
    puts 'SSL error - ignoring.'
  rescue URI::InvalidURIError
    data['error'] = 'Invalid URL'
    puts 'Invalid URL!'
  rescue Zlib::DataError
    puts 'Weird compression error - ignoring.'
  end

  if data['url'] != original_url.to_s || data['error']
    File.open(path, 'w') do |file|
      file.write(YAML.dump(data))
    end
  end
end
